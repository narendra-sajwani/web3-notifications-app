{
  "language": "Solidity",
  "sources": {
    "contracts/NotificationService.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nerror Notification__ChannelAlreadyCreated();\nerror NotificationService__ChannelDoesNotExist();\nerror NotificationService__NotAdmin();\nerror NotificationService__NotADelegate();\nerror NotificationService__UserNotSubscribed();\nerror NotificationService__NeitherAdminNorDelegate();\nerror NotificationService__UserAlreadySubscribed();\n\ncontract NotificationService {\n    enum ChannelState {\n        ACTIVE,\n        MUTED,\n        DELETED\n    }\n\n    struct Channel {\n        address admin;\n        string channelName;\n        string channelDescription;\n        // address[] delegates;\n        // address[] subsribers;\n        ChannelState channelState;\n        uint256 channelId;\n    }\n\n    struct User {\n        mapping(address => bool) isSubscribed;\n    }\n\n    struct NotificationMessage {\n        uint256 channelId;\n        address admin;\n        address recipient;\n        string message;\n    }\n\n    mapping(uint256 => address) private channelIdToAdmin;\n    mapping(address => Channel) private adminToChannel;\n    mapping(address => address) private delegateToAdmin;\n    mapping(address => User) private addressToUser;\n    uint256 public channelCounter;\n\n    event ChannelCreated(\n        uint256 indexed channelId,\n        address indexed admin,\n        string channelName,\n        string channelDescription\n    );\n    event DelegateAdded(address indexed admin, address indexed delegate);\n    event DelegateRemoved(address indexed admin, address indexed delegate);\n    event ChannelMuted(address indexed admin);\n    event ChannelUnmuted(address indexed admin);\n    event ChannelDeleted(address indexed admin);\n    event NotificationEvent(NotificationMessage notification);\n    event UserSubscribed(uint256 indexed _channelId, address indexed subscriber);\n    event UserUnsubscribed(uint256 indexed _channelId, address indexed subscriber);\n\n    modifier notAlreadyCreated(address admin) {\n        if (adminToChannel[admin].admin != address(0)) {\n            revert Notification__ChannelAlreadyCreated();\n        }\n        _;\n    }\n\n    modifier channelExists(address _admin) {\n        if (adminToChannel[_admin].admin == address(0)) {\n            revert NotificationService__ChannelDoesNotExist();\n        }\n        _;\n    }\n\n    modifier onlyAdmin(address caller) {\n        if (caller != adminToChannel[caller].admin) {\n            revert NotificationService__NotAdmin();\n        }\n        _;\n    }\n\n    modifier isDelegate(address admin, address delegate) {\n        if (delegateToAdmin[delegate] == address(0)) {\n            revert NotificationService__NotADelegate();\n        }\n        _;\n    }\n\n    modifier isSubscribed(address _recipient, address _admin) {\n        if (!addressToUser[_recipient].isSubscribed[_admin]) {\n            revert NotificationService__UserNotSubscribed();\n        }\n        _;\n    }\n\n    modifier onlyAdminOrDelegate(uint256 _channelId, address caller) {\n        if (\n            !(caller == channelIdToAdmin[_channelId] ||\n                delegateToAdmin[caller] == channelIdToAdmin[_channelId])\n        ) {\n            revert NotificationService__NeitherAdminNorDelegate();\n        }\n        _;\n    }\n\n    modifier notAlreadySubscribed(uint256 _channelId, address caller) {\n        if (addressToUser[caller].isSubscribed[channelIdToAdmin[_channelId]]) {\n            revert NotificationService__UserAlreadySubscribed();\n        }\n        _;\n    }\n\n    function createChannel(string memory _channelName, string memory _channelDescription)\n        external\n        notAlreadyCreated(msg.sender)\n    {\n        Channel memory newChannel = Channel(\n            msg.sender,\n            _channelName,\n            _channelDescription,\n            ChannelState.ACTIVE,\n            channelCounter\n        );\n        channelIdToAdmin[channelCounter] = msg.sender;\n        adminToChannel[msg.sender] = newChannel;\n        emit ChannelCreated(channelCounter, msg.sender, _channelName, _channelDescription);\n        channelCounter++;\n    }\n\n    function addDelegate(address delegate)\n        external\n        channelExists(msg.sender)\n        onlyAdmin(msg.sender)\n    {\n        delegateToAdmin[delegate] = msg.sender;\n        emit DelegateAdded(msg.sender, delegate);\n    }\n\n    function removeDelegate(address delegate)\n        external\n        channelExists(msg.sender)\n        onlyAdmin(msg.sender)\n        isDelegate(msg.sender, delegate)\n    {\n        delete delegateToAdmin[delegate];\n        emit DelegateRemoved(msg.sender, delegate);\n    }\n\n    function muteChannel() external channelExists(msg.sender) onlyAdmin(msg.sender) {\n        adminToChannel[msg.sender].channelState = ChannelState.MUTED;\n        emit ChannelMuted(msg.sender);\n    }\n\n    function unmuteChannel() external channelExists(msg.sender) onlyAdmin(msg.sender) {\n        adminToChannel[msg.sender].channelState = ChannelState.ACTIVE;\n        emit ChannelUnmuted(msg.sender);\n    }\n\n    function deleteChannel() external channelExists(msg.sender) onlyAdmin(msg.sender) {\n        delete adminToChannel[msg.sender];\n        emit ChannelDeleted(msg.sender);\n    }\n\n    function sendNotification(\n        uint256 _channelId,\n        address _recipient,\n        string memory _message\n    )\n        external\n        channelExists(channelIdToAdmin[_channelId])\n        isSubscribed(_recipient, channelIdToAdmin[_channelId])\n        onlyAdminOrDelegate(_channelId, msg.sender)\n    {\n        NotificationMessage memory notif = NotificationMessage(\n            _channelId,\n            channelIdToAdmin[_channelId],\n            _recipient,\n            _message\n        );\n        emit NotificationEvent(notif);\n    }\n\n    //////////////////////////////\n    ////// User Functions ////////\n    /////////////////////////////\n    function subscribe(uint256 _channelId)\n        external\n        channelExists(channelIdToAdmin[_channelId])\n        notAlreadySubscribed(_channelId, msg.sender)\n    {\n        addressToUser[msg.sender].isSubscribed[channelIdToAdmin[_channelId]] = true;\n        emit UserSubscribed(_channelId, msg.sender);\n    }\n\n    function unsubscribe(uint256 _channelId)\n        external\n        channelExists(channelIdToAdmin[_channelId])\n        isSubscribed(msg.sender, channelIdToAdmin[_channelId])\n    {\n        addressToUser[msg.sender].isSubscribed[channelIdToAdmin[_channelId]] = false;\n        emit UserUnsubscribed(_channelId, msg.sender);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}